@use 'sass:color' as s-color;

@use '../functions' as fn;
@use '../variables/base';
@use '../variables/font';
@use '../variables/color';
@use '../variables/transition';
@use '../variables/global-config';
@use '../components/button';

/// Module config
$rounded: true !default;

/// Module variables
$icon-color: currentColor;
$icon-chevron-down: "data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='#{$icon-color}' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'><polyline points='6 9 12 15 18 9'></polyline></svg>";

@supports (-webkit-appearance: none) or (-moz-appearance: none) {

	input:not([type='range' i]),
	textarea,
	select {
		--spacing-inner: #{fn.spacing(.75)};
		--color-border: var(--gray-600);
		--color-border-hover: var(--theme);
		--size-font: 1rem;
		--box-shadow-focus: 2px #{rgba(color.$theme, .3)};
		--color-background: #FFF;
		--color-background-disabled: var(--gray-200);
		--width-border: 1px;

		font-family: font.$primary;
		font-size: var(--size-font);
		box-shadow: 0 0 0 1px transparent;
		transition: {
			property: border-color, color, background-color, box-shadow;
			duration: transition.$speed-fast;
		}
		background-color: var(--color-background);
		outline: none;
		border: var(--width-border) solid var(--color-border);
		appearance: none;

		@if fn.global-or-local(global-config.$rounded, $rounded) {
			border-radius: base.$corner-radius;
		}

		&:focus {
			box-shadow: 0 0 0 var(--box-shadow-focus);
		}

		&:not([type='file' i]) {
			padding: var(--spacing-inner);
		}

		&:disabled {
			--color-background: var(--color-background-disabled);

			cursor: not-allowed;
		}
	}

	input[type='number' i],
	input[type='email' i],
	input[type='tel' i] {
		--spacing-inner-vertical: #{fn.spacing(.75)};
		--spacing-inner-horizontal: calc(var(--spacing-inner-vertical) * 2);

		padding: var(--spacing-inner-vertical) var(--spacing-inner-horizontal);
	}

	button,
	select,
	input[type='submit' i],
	input[type='button' i],
	input[type='reset' i],
	input[type='color' i] {
		@extend .c-button;

		--spacing-inner-vertical: #{fn.spacing(.75)};
		--spacing-inner-horizontal: calc(var(--spacing-inner-vertical) * 2);
	}

	input[type='color' i] {
		padding: 0;
	}

	input[type='checkbox' i],
	input[type='radio' i] {
		--color-active: var(--theme);
		--color-inner-active: #FFF;
		--color-border-disabled-checked: #{s-color.scale(color.$theme, $lightness: 60%)};
		--color-background-disabled-checked: #{s-color.scale(color.$theme, $lightness: 80%)};
		--duration-transition-transform: .3s;
		--timing-transition-transform: ease;
		--duration-transition-opacity: .2s;
		--cursor: pointer;

		height: 21px;
		display: inline-block;
		vertical-align: top;
		position: relative;
		margin: 0;
		cursor: var(--cursor);
		border: 1px solid var(--color-border);
		transition: background .3s, border-color .3s, box-shadow .2s;

		&::after {
			content: '';
			display: block;
			left: 0;
			top: 0;
			position: absolute;
			transition: transform var(--duration-transition-transform) var(--timing-transition-transform), opacity var(--duration-transition-opacity);
		}

		&:checked {
			--color-background: var(--color-active);
			--color-border: var(--color-active);
			--duration-transition-opacity: .3s;
			--duration-transition-transform: .6s;
			--timing-transition-transform: cubic-bezier(.2, .85, .32, 1.2);
		}

		&:disabled {
			--color-background: var(--color-background-disabled);

			--cursor: not-allowed;
			opacity: .9;

			&:checked {
				--color-background: var(--color-background-disabled-checked);
				--color-border: var(--color-border-disabled-checked);
			}

			& + label {
				--cursor: not-allowed;
			}
		}

		&:hover {

			&:not(:checked) {

				&:not(:disabled) {
					--color-border: var(--color-border-hover);
				}
			}
		}

		&:focus {
			box-shadow: 0 0 0 var(--box-shadow-focus);
		}

		&:not(.u-switch) {
			width: 21px;

			&::after {
				opacity: var(--opacity, 0);
			}

			&:checked {
				--opacity: 1;
			}
		}

		& + label {
			--cursor: pointer;

			font-size: 14px;
			line-height: 21px;
			display: inline-block;
			vertical-align: top;
			cursor: var(--cursor);
			margin-left: 4px;
		}
	}

	input[type='checkbox' i] {

		&:not(.u-switch) {

			@if fn.global-or-local(global-config.$rounded, $rounded) {
				border-radius: 3px;
			}

			&::after {
				width: 5px;
				height: 9px;
				left: 7px;
				top: 4px;
				transform: rotate(var(--rotate, 20deg));
				border: {
					top: 0;
					right: 2px solid var(--color-inner-active);
					bottom: 2px solid var(--color-inner-active);
					left: 0;
				}
			}

			&:checked {
				--rotate: 43deg;
			}
		}

		&.u-switch {
			width: 38px;
			@if fn.global-or-local(global-config.$rounded, $rounded) {
				border-radius: 11px;
			}

			&::after {
				--color-background: #{color.$gray-500};

				left: 2px;
				top: 2px;
				width: 15px;
				height: 15px;
				background: var(--color-background-after, var(--color-background));
				transform: translateX(var(--translate-x, 0));

				@if fn.global-or-local(global-config.$rounded, $rounded) {
					border-radius: 50%;
				}
			}

			&:checked {
				--color-background-after: #FFF;
				--translate-x: 17px;
			}

			&:disabled {

				&:not(:checked) {

					&::after {
						opacity: .6;
					}
				}
			}
		}
	}

	input[type='radio' i] {
		border-radius: 50%;

		&::after {
			width: 19px;
			height: 19px;
			border-radius: 50%;
			background: var(--color-inner-active);
			opacity: 0;
			transform: scale(var(--scale, .7));
		}

		&:checked {
			--scale: .5;
		}
	}

	%track {
		background-color: color.$gray-200;
		width: 100%;
		height: .3rem;
	}

	%thumb {
		background-color: var(--color-background-thumb);
		width: var(--size-thumb);
		height: var(--size-thumb);
		margin-top: calc(-1 * var(--height-track) - .05rem); // -1 * to negate the value
		border-radius: 50%;
	}

	input[type='range' i] {
		$color-background-track: color.$gray-200;
		$color-background-thumb: color.$theme;
		$height-track: .3rem;
		$size-thumb: 1rem;

		--color-background-track: var(--gray-200);
		--color-background-thumb: var(--theme);
		--height-track: .3rem;
		--size-thumb: 1rem;

		appearance: none;
		background-color: transparent; // Mozilla need this

		&::-webkit-slider-runnable-track {
			background-color: color.$gray-200;
			width: 100%;
			height: $height-track;
		}

		&::-moz-range-thumb {
			background-color: $color-background-thumb;
			width: $size-thumb;
			height: $size-thumb;
			margin-top: -($height-track - .05rem);
			border-radius: 50%;
			border-color: transparent; // Mozilla need this
			border-width: 0; // Mozilla need this
			appearance: none;
		}

		&::-moz-range-track {
			background-color: color.$gray-200;
			width: 100%;
			height: $height-track;
		}

		&::-webkit-slider-thumb {
			background-color: $color-background-thumb;
			width: $size-thumb;
			height: $size-thumb;
			margin-top: -($height-track - .05rem);
			border-radius: 50%;
		}
	}

	input[type='file' i] {

		&:not(:disabled) {
			cursor: pointer;

			&:hover {

				&::file-selector-button {
					--width-border: 0;
					--color-border-hover: var(--gray-600);

					border-inline-end-width: 1px;
				}
			}
		}

		&::file-selector-button {
			// FIXME: Herausfinden, warum die gesamte .c-button Klasse entfernt wird, wenn dieses Pseudo-Element extended wird â€” Autoprefixer
			// @extend .c-button;

			--width-border: 0;

			margin-inline-end: fn.spacing();
			border-inline-end-width: 1px;
			border-color: inherit;
			border-top-right-radius: 0;
			border-bottom-right-radius: 0;
		}
	}

	select {
		--spacing-inner: #{fn.spacing(.750)} #{fn.spacing(4.5)} #{fn.spacing(.750)} #{fn.spacing(1.5)};

		background: {
			image: url('#{fn.escape-svg($icon-chevron-down)}');
			repeat: no-repeat;
			position: right fn.spacing(1.5) center;
			size: 16px 12px;
		}

		&:not(:disabled):hover {
			--color-hover-background: var(--gray-200);
		}
	}

	fieldset {
		--spacing-after: #{fn.spacing(2)};
		--spacing-inner: #{fn.spacing(2)};
		--spacing-legend: calc(var(--spacing-inner) / 2);
		--color-border: #{color.$gray-200};
		--width-border: 2px;
		--style-border: solid;

		padding: var(--spacing-inner);
		margin-bottom: var(--spacing-after);
		border: var(--width-border) var(--style-border) var(--color-border);

		legend {
			font-weight: 600;
			padding: 0 var(--spacing-legend);
			margin-left: fn.negate(var(--spacing-legend));
		}
	}
}

.u-check {
	display: block;

	&:not(:last-of-type) {
		margin-bottom: fn.spacing();
	}
}

