@use 'sass:string';
@use 'sass:meta';

@use '../variables/escaped-characters' as esc-ca;
@use 'str-replace' as rp;

/// Requires the use of quotes around data URIs.
/// @param {String} $string - SVG code
/// @return {String} - SCSS compiled output after URL-encoding
/// @group String
/// @link https://codepen.io/kevinweber/pen/dXWoRw
///
/// @example
/// 	$icon: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'><polyline points='6 9 12 15 18 9'></polyline></svg>");
///
/// 	background-image: escape-svg($icon);
///
@function escape-svg($string) {
	@if meta.type-of($string) != string {
		@error '❌  ===> #{$string} is not a string';
	}

	@if string.index($string, 'data:image/svg+xml') {
		@each $char, $encoded in esc-ca.$escaped-characters {
			// Do not escape the url brackets
			@if string.index($string, 'url(') == 1 {
				$string: url('#{rp.str-replace(string.slice($string, 6, -3), $char, $encoded)}');
			} @else {
				$string: rp.str-replace($string, $char, $encoded);
			}
		}
	}

	@return $string;
}
